{"/home/travis/build/npmtest/node-npmtest-sheetify/test.js":"/* istanbul instrument in package npmtest_sheetify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sheetify/lib.npmtest_sheetify.js":"/* istanbul instrument in package npmtest_sheetify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sheetify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sheetify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sheetify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sheetify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sheetify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sheetify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sheetify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sheetify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sheetify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sheetify.__dirname + '/lib.npmtest_sheetify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sheetify/node_modules/sheetify/index.js":"const cssPrefix = require('postcss-prefix')\nconst nodeResolve = require('resolve')\nconst mapLimit = require('map-limit')\nconst postcss = require('postcss')\nconst assert = require('assert')\nconst crypto = require('crypto')\nconst xtend = require('xtend')\nconst stackTrace = require('stack-trace')\nconst cssResolve = require('style-resolve').sync\nconst fs = require('fs')\nconst path = require('path')\n\nmodule.exports = sheetify\nmodule.exports.getPrefix = getPrefix\n\n// transform css\n// (str, str, obj?, fn) -> str\nfunction sheetify (src, filename, options, done) {\n  // handle tagged template calls directly from Node\n  const isTemplate = Array.isArray(src)\n  if (isTemplate) src = src.join('')\n  assert.equal(typeof src, 'string', 'src must be a string')\n  src = src.trim()\n\n  // Ensure prefix is always correct when run from inside node\n  var css\n  if (!isTemplate && (!filename || typeof filename === 'object')) {\n     // module or file name via tagged template call w or w/out options\n    const callerDirname = path.dirname(stackTrace.get()[1].getFileName())\n    const resolved = cssResolve(src, { basedir: callerDirname })\n    css = fs.readFileSync(resolved, 'utf8')\n  } else {\n    // it better be some css\n    css = src\n  }\n\n  const prefix = getPrefix(css)\n\n  // only parse if in a browserify transform\n  if (typeof filename === 'string') parseCss(src, filename, prefix, options, done)\n\n  return prefix\n}\n\nfunction getPrefix (css) {\n  const prefix = '_' + crypto.createHash('md5')\n    .update(css.trim())\n    .digest('hex')\n    .slice(0, 8)\n  return prefix\n}\n\n// parse css\n// (str, str, str, obj, fn) -> null\nfunction parseCss (src, filename, prefix, options, done) {\n  assert.equal(typeof filename, 'string', 'filename must be a string')\n  assert.equal(typeof prefix, 'string', 'prefix must be a string')\n  assert.equal(typeof options, 'object', 'options must be a object')\n  assert.equal(typeof done, 'function', 'done must be a function')\n\n  applyTransforms(filename, String(src), xtend(options), function (err, css) {\n    if (err) return done(err)\n    var p = postcss()\n    p = p.use(cssPrefix('.' + prefix))\n\n    try {\n      css = p.process(css).toString()\n\n      return done(null, css, prefix)\n    } catch (e) {\n      return done(e)\n    }\n  })\n\n  // apply transforms to a string of css,\n  // one at the time\n  // (str, str, obj, fn) -> null\n  function applyTransforms (filename, src, options, done) {\n    options.use = [].concat(options.use || []).concat(options.u || [])\n    mapLimit(options.use, 1, iterate, function (err) {\n      if (err) return done(err)\n      done(null, src)\n    })\n\n    // find and apply a transform to a string of css\n    // (fn, fn) -> null\n    function iterate (plugin, next) {\n      if (typeof plugin === 'string') {\n        plugin = [ plugin, {} ]\n      } else if (!Array.isArray(plugin)) {\n        return done(new Error('Plugin must be a string or array'))\n      }\n\n      const name = plugin[0]\n      const opts = plugin[1] || {}\n\n      const resolveOpts = {\n        basedir: opts.basedir || options.basedir || process.cwd()\n      }\n      nodeResolve(name, resolveOpts, function (err, transformPath) {\n        if (err) return done(err)\n\n        const transform = require(transformPath)\n        transform(filename, src, opts, function (err, result) {\n          if (err) return next(err)\n          src = result\n          next()\n        })\n      })\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sheetify/node_modules/sheetify/browser.js":"var message = (\n  'It appears that you\\'re trying to require sheetify in the browser ' +\n  'but it wasn\\'t caught by the browserify transform. Either the transform ' +\n  'has not been enabled, or the require statement could not be statically ' +\n  'resolved.'\n)\n\nmodule.exports = function sheetifyUntransformedBrowserError () {\n  throw new Error(message)\n}\n","/home/travis/build/npmtest/node-npmtest-sheetify/node_modules/sheetify/insert.js":"module.exports = require('insert-css')\n","/home/travis/build/npmtest/node-npmtest-sheetify/node_modules/sheetify/transform.js":"const cssResolve = require('style-resolve').sync\nconst staticEval = require('static-eval')\nconst mapLimit = require('map-limit')\nconst through = require('through2')\nconst falafel = require('falafel')\nconst xtend = require('xtend')\nconst path = require('path')\nconst fs = require('fs')\n\nconst sheetify = require('./index')\n\nmodule.exports = transform\n\n// inline sheetify transform for browserify\n// obj -> (str, opts) -> str\nfunction transform (filename, options) {\n  if (/\\.json$/i.test(filename)) return through()\n\n  const opts = xtend(options || {\n    basedir: process.cwd(),\n    use: [],\n    out: ''\n  })\n\n  opts.use = [].concat(opts.use || []).concat(opts.u || [])\n\n  const bufs = []\n  const transformStream = through(write, end)\n  return transformStream\n\n  // aggregate all AST nodes\n  // (buf, str, fn) -> null\n  function write (buf, enc, next) {\n    bufs.push(buf)\n    next()\n  }\n\n  // parse and push AST nodes\n  // null -> null\n  function end () {\n    const self = this\n\n    // cool, you've made it this far. We know this is gross,\n    // but tough times call for tough measure. Please don't\n    // judge us too harshly, we'll work on perf ✨soon✨ -yw\n    const nodes = []\n    const src = Buffer.concat(bufs).toString('utf8')\n    var mname = null\n    var ast\n\n    if (src.indexOf('sheetify') === -1) {\n      self.push(src)\n      self.push(null)\n      return\n    }\n\n    try {\n      const tmpAst = falafel(src, { ecmaVersion: 6 }, identifyModuleName)\n      ast = falafel(tmpAst.toString(), { ecmaVersion: 6 }, extractNodes)\n    } catch (err) {\n      return self.emit('error', err)\n    }\n\n    // transform all detected nodes and\n    // close stream when done\n    mapLimit(nodes, Infinity, iterate, function (err) {\n      if (err) return self.emit('error', err)\n      self.push(ast.toString())\n      self.push(null)\n    })\n\n    function identifyModuleName (node) {\n      if (mname) return\n      if (node.type === 'CallExpression' &&\n      node.callee && node.callee.name === 'require' &&\n      node.arguments.length === 1 &&\n      node.arguments[0].value === 'sheetify') {\n        node.update('0')\n        mname = node.parent.id.name\n      }\n    }\n\n    function extractNodes (node) {\n      extractTemplateNodes(node)\n      extractImportNodes(node)\n    }\n\n    function extractTemplateNodes (node) {\n      if (node.type !== 'TemplateLiteral') return\n      if (!node.parent || !node.parent.tag) return\n      if (node.parent.tag.name !== mname) return\n\n      const css = [ node.quasis.map(cooked) ]\n        .concat(node.expressions.map(expr)).join('').trim()\n\n      const val = {\n        css: css,\n        filename: filename,\n        opts: xtend(opts),\n        node: node.parent\n      }\n\n      nodes.push(val)\n    }\n\n    function extractImportNodes (node) {\n      if (node.type !== 'CallExpression') return\n      if (!node.callee || node.callee.type !== 'Identifier') return\n      if (node.callee.name !== mname) return\n      try {\n        var resolvePath = cssResolve(node.arguments[0].value, {\n          basedir: path.dirname(filename)\n        })\n        self.emit('file', resolvePath)\n      } catch (err) {\n        return self.emit('error', err)\n      }\n\n      const iOpts = (node.arguments[1])\n        ? xtend(opts, staticEval(node.arguments[1]))\n        : opts\n\n      const val = {\n        filename: resolvePath,\n        opts: iOpts,\n        node: node\n      }\n\n      nodes.push(val)\n    }\n  }\n\n  // iterate over nodes, and apply sheetify transformation\n  // then replace the AST nodes with new values\n  // (obj, fn) -> null\n  function iterate (val, done) {\n    if (val.css) return handleCss(val)\n    fs.readFile(val.filename, 'utf8', function (err, css) {\n      if (err) return done(err)\n      val.css = css\n      handleCss(val)\n    })\n\n    function handleCss (val) {\n      sheetify(val.css, val.filename, val.opts, function (err, css, prefix) {\n        if (err) return done(err)\n        const str = [\n          \"((require('sheetify/insert')(\" + JSON.stringify(css) + ')',\n          ' || true) && ' + JSON.stringify(prefix) + ')'\n        ].join('')\n\n        const lolSemicolon = (val.node.parent.type === 'VariableDeclarator')\n          ? ''\n          : ';'\n        val.node.update(lolSemicolon + str)\n        done()\n      })\n    }\n  }\n}\n\nfunction cooked (node) { return node.value.cooked }\nfunction expr (ex) { return { _expr: ex.source() } }\n"}